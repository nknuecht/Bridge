#ifndef UTIL_H
#define UTIL_H

/* Util.h
 *
 * 
 *
 * by Nicholas Nuechterlein
 * nknuecht@umich.edu
 * 2015-03-02
 */

#include <vector>
#include <string>
#include <cassert>
#include <map>
#include <unordered_map>
#include <utility>
#include <queue>
#include <iostream>


//REQUIRES suit_pq is empty.
//MODIFIES suit_pq
//EFFECTS  converts hands' four suits into Suit_Length structs and adds them to the empty suit_pq
void Fill_suit_pq(std::priority_queue<Suit_Length, std::vector<Suit_Length>, CompSuits> &suit_pq, Hand &hand, Bid partner_bid);

//REQUIRES requires suit \in {-1, 0, 1, 2, 3, 4}
//MODIFIES hand_data
//EFFECTS  adds information to hand_data's point_range, suit_length, bid_name, and passed stautus promised by the opening bid made.
void Set_opening_data(Hand_Public &hand_data, std::pair<int, int> points, int suit, int suit_length, Bid bid_name);

//REQUIRES 
//MODIFIES opening_data
//EFFECTS  fill a table in opening_data which contains the information promised by all opening bids
void Fill_opening_data(std::unordered_map<std::string, Hand_Public> &opening_data);

//REQUIRES hand is empty
//MODIFIES hand
//EFFECTS  adds cards from file to given hand
void ReadLine(std::string line, Hand &hand);

//REQUIRES 
//MODIFIES opening, hand_data, bidder
//EFFECTS  assigns bid_name from file to opening, fills in promised data from this opening bid into hand_data via opening_data table, and increments bidder. 
void ReadBid(std::ifstream &file, std::string &line, Bid &opening_bid, Hand_Public &hand_data, std::unordered_map<std::string, Hand_Public> &opening_data, int &bidder);

//static void CheckBids_helper(std::ifstream &file, std::string &line, Bid &correct_opening_bid, Bid &opening_bid, std::unordered_map<std::string, Hand_Public> &opening_data,  std::string player_name);

//REQUIRES 
//MODIFIES bid_checks
//EFFECTS  obtains south's (the test bid) correct bid for later verification. calls CheckBid_helper to varify that all other bids are consistent (human error check)
void CheckBids(std::ifstream &file, std::string &line, std::vector< std:: pair<Bid, Bid> > &bid_checks, std::unordered_map<std::string, Hand_Public> &opening_data);
			
void ReadFile(std::ifstream &file, 
			  std::string &line, 
			  int &total_num_hands, 
			  int &number_hands, 
			  std::vector< std:: pair<Bid, Bid> > &bid_checks,
			  std::unordered_map<std::string, Hand_Public> &opening_data, 
			  std::vector<Hand_Public> &pub_vec, 
			  int &bidder, 
			  std::vector<Hand> &hands);
			  
			  



#endif
